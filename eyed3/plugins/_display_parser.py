#!/usr/env/bin python
# -*- coding: utf-8 -*-
#
# CAVEAT UTILITOR
# This file was automatically generated by Grako.
#    https://bitbucket.org/apalala/grako/
# Any changes you make to it will be overwritten the
# next time the file is generated.
#

from __future__ import print_function, division, absolute_import, unicode_literals
from grako.parsing import * # @UnusedWildImport
from grako.exceptions import * # @UnusedWildImport

__version__ = '22.017.21.54.13'

class DisplayPatternParser(Parser):
    @rule_def
    def start(self):
        self.pattern()
        self._check_eof()

    @rule_def
    def pattern(self):
        def block0():
            with self._choice():
                with self._option():
                    self.text()
                with self._option():
                    self.tag()
                with self._option():
                    self.function()
                self._error('no available options')
        self._closure(block0)

    @rule_def
    def tag(self):
        with self._group():
            self._token('%')
            self.string()
            self.ast['name'] = self.last_node
            def block2():
                self._token(',')
                with self._group():
                    self.parameter()
                self.ast.add_list('parameters', self.last_node)
            self._closure(block2)
            self._token('%')
        self.ast['tag'] = self.last_node

    @rule_def
    def function(self):
        with self._group():
            self._token('$')
            self.string()
            self.ast['name'] = self.last_node
            self._token('(')
            with self._optional():
                with self._group():
                    self.parameter()
                self.ast.add_list('parameters', self.last_node)
                def block3():
                    self._token(',')
                    with self._group():
                        self.parameter()
                    self.ast.add_list('parameters', self.last_node)
                self._closure(block3)
            self._token(')')
        self.ast['function'] = self.last_node

    @rule_def
    def parameter(self):
        with self._optional():
            def block0():
                self._token(' ')
            self._closure(block0)
            self.string()
            self.ast['name'] = self.last_node
            self._token('=')
        with self._optional():
            self.pattern()
            self.ast['value'] = self.last_node

    @rule_def
    def text(self):
        self._pattern(r'(\\\\|\\%|\\\$|\\,|\\\(|\\\)|\\=|\\n|\\t|[^\\%$,()])+')
        self.ast['text'] = self.last_node

    @rule_def
    def string(self):
        self._pattern(r'([^\\%$,()=])+')



class DisplayPatternSemanticParser(CheckSemanticsMixin, DisplayPatternParser):
    pass


class DisplayPatternSemantics(object):
    def start(self, ast):
        return ast

    def pattern(self, ast):
        return ast

    def tag(self, ast):
        return ast

    def function(self, ast):
        return ast

    def parameter(self, ast):
        return ast

    def text(self, ast):
        return ast

    def string(self, ast):
        return ast

def main(filename, startrule):
    import json
    with open(filename) as f:
        text = f.read()
    parser = DisplayPatternParser(parseinfo=False)
    ast = parser.parse(text, startrule, filename=filename)
    print('AST:')
    print(ast)
    print()
    print('JSON:')
    print(json.dumps(ast, indent=2))
    print()

if __name__ == '__main__':
    import sys
    if '-l' in sys.argv:
        print('Rules:')
        for r in DisplayPatternParser.rule_list():
            print(r)
        print()
    elif len(sys.argv) == 3:
        main(sys.argv[1], sys.argv[2])
    else:
        print('Usage:')
        program = sys.argv[0].split('/')[-1]
        print(program, ' <filename> <startrule>')
        print(program, ' -l') # list rules
        print(program, ' -h')
